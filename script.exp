#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Oct  4 09:19:55 2016
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn $env(SHELL)
set timeout 2
match_max 100000
expect -exact "\[0;30m\[46m\[1;37m\[46msajith \[0;36m\[47mî‚° \[0;30m\[47m~ î‚± toolsî‚± forticlientsslvpn\[0;37m\[44mî‚° î¡¨ Tue Oct 04 \[0;34m\[47mî‚° 09:19:55 \[0;37m\[46mî‚°\[0m\[0;30m\[46mâš¡ 56%\[0;36m\[40mî‚°\[0m\r\r
\$ "
send -- "cd /home/pagero/tools/forticlientsslvpn"
expect -exact "/home/pagero/tools/forticlientsslvpn"
send -- "\r"
expect -exact "\r
\[0;30m\[46m\[1;37m\[46msajith \[0;36m\[47mî‚° \[0;30m\[47m~ î‚± toolsî‚± forticlientsslvpn\[0;37m\[44mî‚° î¡¨ Tue Oct 04 \[0;34m\[47mî‚° 09:20:31 \[0;37m\[46mî‚°\[0m\[0;30m\[46mâš¡ 57%\[0;36m\[40mî‚°\[0m\r\r
\$ "
send -- "./forticlientsslvpn_cli  --server https://vpn.pagero.com:443 --vpnuser sajiths"
expect -exact "./forticlientsslvpn_cli  --server https://vpn.pagero.com:443 --vpnuser sajiths"
send -- "\r"
expect -exact "\r
Password for VPN:"
send -- "De3pSp^<e9\r"
expect -exact "\r
STATUS::Setting up the tunnel\r
STATUS::Connecting...\r
NOTICE::ing /home/sajith/.fctsslvpn_trustca\r
Certificate:        Version: 3 (0x2)\$        Serial Number:\$            04:00:00:00:00:01:15:4b:5a:c3:94\$    Signature Algorithm: sha1WithRSAEncryption\$        Issuer: C=BE, O=GlobalSign nv-sa, OU=Root CA, CN=GlobalSign Root CA\$        Validity\$            Not Before: Sep  1 12:00:00 1998 GMT\$            Not After : Jan 28 12:00:00 2028 GMT\$        Subject: C=BE, O=GlobalSign nv-sa, OU=Root CA, CN=GlobalSign Root CA\$        Subject Public Key Info:\$            Public Key Algorithm: rsaEncryption\$                Public-Key: (2048 bit)\$                Modulus:\$                    00:da:0e:e6:99:8d:ce:a3:e3:4f:8a:7e:fb:f1:8b:\$                    83:25:6b:ea:48:1f:f1:2a:b0:b9:95:11:04:bd:f0:\$                    63:d1:e2:67:66:cf:1c:dd:cf:1b:48:2b:ee:8d:89:\$                    8e:9a:af:29:80:65:ab:e9:c7:2d:12:cb:ab:1c:4c:\$                    70:07:a1:3d:0a:30:cd:15:8d:4f:f8:dd:d4:8c:50:\$                    15:1c:ef:50:ee:c4:2e:f7:fc:e9:52:f2:91:7d:e0:\$                    6d:d5:35:30:8e:5e:43:73:f2:41:e9:d5:6a:e3:b2:\$                    89:3a:56:39:38:6f:06:3c:88:69:5b:2a:4d:c5:a7:\$                    54:b8:6c:89:cc:9b:f9:3c:ca:e5:fd:89:f5:12:3c:\$                    92:78:96:d6:dc:74:6e:93:44:61:d1:8d:c7:46:b2:\$                    75:0e:86:e8:19:8a:d5:6d:6c:d5:78:16:95:a2:e9:\$                    c8:0a:38:eb:f2:24:13:4f:73:54:93:13:85:3a:1b:\$                    bc:1e:34:b5:8b:05:8c:b9:77:8b:b1:db:1f:20:91:\$                    ab:09:53:6e:90:ce:7b:37:74:b9:70:47:91:22:51:\$                    63:16:79:ae:b1:ae:41:26:08:c8:19:2b:d1:46:aa:\$                    48:d6:64:2a:d7:83:34:ff:2c:2a:c1:6c:19:43:4a:\$                    07:85:e7:d3:7c:f6:21:68:ef:ea:f2:52:9f:7f:93:\$                    90:cf\$                Exponent: 65537 (0x10001)\$        X509v3 extensions:\$            X509v3 Key Usage: critical\$                Certificate Sign, CRL Sign\$            X509v3 Basic Constraints: critical\$                CA:TRUE\$            X509v3 Subject Key Identifier: \$                60:7B:66:1A:45:0D:97:CA:89:50:2F:7D:04:CD:34:A8:FF:FC:FD:4B\$    Signature Algorithm: sha1WithRSAEncryption\$         d6:73:e7:7c:4f:76:d0:8d:bf:ec:ba:a2:be:34:c5:28:32:b5:\$         7c:fc:6c:9c:2c:2b:bd:09:9e:53:bf:6b:5e:aa:11:48:b6:e5:\$         08:a3:b3:ca:3d:61:4d:d3:46:09:b3:3e:c3:a0:e3:63:55:1b:\$         f2:ba:ef:ad:39:e1:43:b9:38:a3:e6:2f:8a:26:3b:ef:a0:50:\$         56:f9:c6:0a:fd:38:cd:c4:0b:70:51:94:97:98:04:df:c3:5f:\$         94:d5:15:c9:14:41:9c:c4:5d:75:64:15:0d:ff:55:30:ec:86:\$         8f:ff:0d:ef:2c:b9:63:46:f6:aa:fc:df:bc:69:fd:2e:12:48:\$         64:9a:e0:95:f0:a6:ef:29:8f:01:b1:15:b5:0c:1d:a5:fe:69:\$         2c:69:24:78:1e:b3:a7:1c:71:62:ee:ca:c8:97:ac:17:5d:8a:\$         c2:f8:47:86:6e:2a:c4:56:31:95:d0:67:89:85:2b:f9:6c:a6:\$         5d:46:9d:0c:aa:82:e4:99:51:dd:70:b7:db:56:3d:61:e4:6a:\$         e1:5c:d6:f6:fe:3d:de:41:cc:07:ae:63:52:bf:53:53:f4:2b:\$         e9:c7:fd:b6:f7:82:5f:85:d2:41:18:db:81:b3:04:1c:c5:1f:\$         a4:80:6f:15:20:c9:de:0c:88:0a:1d:d6:66:55:e2:fc:48:c9:\$         29:26:69:e0\$\r
\r
The certificate for the SSLVPN server is invalid.\r
You are connecting to an untrusted server. which could put your confidential information at risk.\r
Would you like to connect to this server? (Y/N)\r
"
send -- "y\r"
expect -exact "y\r
STATUS::Login succeed\r
STATUS::Starting PPPd\r
STATUS::Initializing tunnel\r
STATUS::Connecting to server\r
STATUS::Connected\r
Press Ctrl-C to quit\r
STATUS::Tunnel running\r
"
set more_screens 1
while {$more_screens > 0} {  
    set timeout 100
}
